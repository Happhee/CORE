{"ast":null,"code":"/*eslint-disable */\nexport function checkTextfieldValue(textfield_data) {\n  for (let index = 0; index < textfield_data.length; index++) {\n    if (textfield_data[index].value === \"\") return false;\n  }\n\n  return true;\n}\nexport function checkBoxChecked(checkbox_data) {\n  let chek = false;\n  checkbox_data.map(data => {\n    console.log(data.checked);\n    if (data.checked === true) chek = true;\n  });\n  return chek;\n}\nexport function newTextfieldValue(textfield_data, value, name) {\n  const newTextfield_data = [...textfield_data];\n  textfield_data.map((data, index) => {\n    if (data.id === name || data.title === name) newTextfield_data[index].value = value;\n  });\n  return newTextfield_data;\n}\nexport function isRegex(textfield_data, helperText_data) {\n  const idRegex = /^[A-za-z0-9]{8,12}$/;\n  const pwRegex = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{10,16}$/;\n  const nameRegx = /^[가-힣]{2,4}$/;\n  const phoneRegex = /^\\d{2,3}-\\d{3,4}-\\d{4}$/;\n  const affiliationRegex = /^[가-힣a-zA-Z]+$/;\n  const newHelperText_data = [...helperText_data];\n  textfield_data.map(data => {\n    if (data.title === 'ID') {\n      console.log(idRegex.test(data.value));\n\n      if (idRegex.test(data.value)) {\n        newHelperText_data[0] = \"❤️CORE❤️\";\n      } else {\n        newHelperText_data[0] = \"영문자,숫자 8-12자리\";\n      }\n    }\n\n    if (data.title === 'PW') {\n      if (pwRegex.test(data.value)) {\n        newHelperText_data[1] = \"❤️CORE❤️\";\n      } else {\n        newHelperText_data[1] = \"영문자 & 숫자 10-16자리\";\n      }\n    }\n\n    if (data.title === '이름') {\n      if (nameRegx.test(data.value)) {\n        newHelperText_data[2] = \"❤️CORE❤️\";\n      } else {\n        newHelperText_data[2] = \"한글 2-4자\";\n      }\n    }\n\n    if (data.title === '전화번호') {\n      if (phoneRegex.test(data.value)) {\n        newHelperText_data[3] = \"❤️CORE❤️\";\n      } else {\n        newHelperText_data[3] = \"0xx-xxxx-xxxx\";\n      }\n    }\n\n    if (data.title === '소속') {\n      if (affiliationRegex.test(data.value)) {\n        newHelperText_data[4] = \"❤️CORE❤️\";\n      } else {\n        newHelperText_data[4] = \"한글,영어로만\";\n      }\n    }\n  });\n  return newHelperText_data;\n}","map":{"version":3,"sources":["/Users/hongseohee/core-client-aws/CORE/core/src/components/InputValidation.js"],"names":["checkTextfieldValue","textfield_data","index","length","value","checkBoxChecked","checkbox_data","chek","map","data","console","log","checked","newTextfieldValue","name","newTextfield_data","id","title","isRegex","helperText_data","idRegex","pwRegex","nameRegx","phoneRegex","affiliationRegex","newHelperText_data","test"],"mappings":"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","sourcesContent":["/*eslint-disable */\n\nexport function checkTextfieldValue(textfield_data) {\n\n    for (let index = 0; index < textfield_data.length; index++) {\n        if (textfield_data[index].value === \"\")\n            return false;\n    }\n    return true;\n\n}\nexport function checkBoxChecked(checkbox_data) {\n    let chek = false\n    checkbox_data.map((data) => {\n        console.log(data.checked)\n        if (data.checked === true)\n            chek = true;\n    })\n    return chek;\n}\n\nexport function newTextfieldValue(textfield_data, value, name) {\n    const newTextfield_data = [...textfield_data];\n    textfield_data.map((data, index) => {\n        if (data.id === name || data.title === name)\n            newTextfield_data[index].value = value;\n\n    })\n    return newTextfield_data;\n}\n\nexport function isRegex(textfield_data, helperText_data) {\n    const idRegex = /^[A-za-z0-9]{8,12}$/;\n    const pwRegex = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{10,16}$/;\n    const nameRegx = /^[가-힣]{2,4}$/\n    const phoneRegex = /^\\d{2,3}-\\d{3,4}-\\d{4}$/;\n    const affiliationRegex = /^[가-힣a-zA-Z]+$/;\n\n    const newHelperText_data = [...helperText_data];\n\n    textfield_data.map((data) => {\n        if (data.title === 'ID') {\n            console.log(idRegex.test(data.value))\n\n            if (idRegex.test(data.value)) {\n                newHelperText_data[0] = \"❤️CORE❤️\";\n            } else {\n                newHelperText_data[0] = \"영문자,숫자 8-12자리\"\n            }\n        }\n\n        if (data.title === 'PW') {\n            if (pwRegex.test(data.value)) {\n                newHelperText_data[1] = \"❤️CORE❤️\";\n            } else {\n                newHelperText_data[1] = \"영문자 & 숫자 10-16자리\"\n            }\n        }\n        if (data.title === '이름') {\n            if (nameRegx.test(data.value)) {\n                newHelperText_data[2] = \"❤️CORE❤️\";\n            } else {\n                newHelperText_data[2] = \"한글 2-4자\"\n            }\n        }\n        if (data.title === '전화번호') {\n            if (phoneRegex.test(data.value)) {\n                newHelperText_data[3] = \"❤️CORE❤️\";\n            } else {\n                newHelperText_data[3] = \"0xx-xxxx-xxxx\"\n            }\n        }\n        if (data.title === '소속') {\n            if (affiliationRegex.test(data.value)) {\n                newHelperText_data[4] = \"❤️CORE❤️\";\n            } else {\n                newHelperText_data[4] = \"한글,영어로만\"\n            }\n        }\n    })\n\n\n    return newHelperText_data;\n\n\n}\n\n"]},"metadata":{},"sourceType":"module"}